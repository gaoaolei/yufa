https://cloud.tencent.com/developer/article/2438371

事件循环(Event Loop): asyncio的核心，负责管理和调度不同任务的执行、处理事件以及分配资源。
协程(Coroutine): 使用async/await语法定义的函数，可以在特定点暂停和恢复执行，从而允许其他操作在暂停期间运行。
Future: 代表未来结果的对象，通常由低层异步回调产生。
Task: 将协程包装为Future对象的异步执行单元，由事件循环进行调度。

Asyncio异步编程的核心思想是让程序在等待I/O操作完成的同时，可以继续执行其他任务，从而提高资源利用率。这就好比一个厨师在炖菜的同时，开始准备沙拉，而不是煮一道菜时傻站着等待。通过合理安排，程序可以在单线程下高效完成诸多任务，从而达到"伪并行"的效果，提高了性能。

await 只能在 async 函数内使用，否则会导致语法错误

async def 定义一个协程

